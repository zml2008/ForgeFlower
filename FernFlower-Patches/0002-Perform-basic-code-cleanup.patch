From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: zml <zml@stellardrift.ca>
Date: Wed, 21 Sep 2022 20:31:33 -0700
Subject: [PATCH] Perform basic code cleanup

This reduces warnings noise from IDEs/compilers in areas that we care about,
allowing future contributions to be more effectively linted.

diff --git a/src/org/jetbrains/java/decompiler/code/ExceptionHandler.java b/src/org/jetbrains/java/decompiler/code/ExceptionHandler.java
index 0d2072600694278ac3c66ff625896c66fc6dc77b..b743d6a601b822ff30ccda767bbf2bb149bfd93c 100644
--- a/src/org/jetbrains/java/decompiler/code/ExceptionHandler.java
+++ b/src/org/jetbrains/java/decompiler/code/ExceptionHandler.java
@@ -14,6 +14,7 @@ public class ExceptionHandler {
 
   public String exceptionClass = null;
 
+  @Override
   public String toString() {
     String new_line_separator = DecompilerContext.getNewLineSeparator();
     return "from: " + from + " to: " + to + " handler: " + handler + new_line_separator +
diff --git a/src/org/jetbrains/java/decompiler/code/InstructionSequence.java b/src/org/jetbrains/java/decompiler/code/InstructionSequence.java
index 3d0cab0d940aef9f20feb5acf2f1494d6d82ef46..11e501feac908e8a2076e26d684b2c1143eafd56 100644
--- a/src/org/jetbrains/java/decompiler/code/InstructionSequence.java
+++ b/src/org/jetbrains/java/decompiler/code/InstructionSequence.java
@@ -109,6 +109,7 @@ public abstract class InstructionSequence {
     this.pointer += diff;
   }
 
+  @Override
   public String toString() {
     return toString(0);
   }
diff --git a/src/org/jetbrains/java/decompiler/code/cfg/ControlFlowGraph.java b/src/org/jetbrains/java/decompiler/code/cfg/ControlFlowGraph.java
index deb2394681f674d4ab8516d9a8522c630fedc3ba..5bb4bda8beb35616fe043f38e83d0f42db54c7d6 100644
--- a/src/org/jetbrains/java/decompiler/code/cfg/ControlFlowGraph.java
+++ b/src/org/jetbrains/java/decompiler/code/cfg/ControlFlowGraph.java
@@ -55,6 +55,7 @@ public class ControlFlowGraph implements CodeConstants {
     }
   }
 
+  @Override
   public String toString() {
     if (blocks == null) return "Empty";
 
diff --git a/src/org/jetbrains/java/decompiler/main/extern/ClassFormatException.java b/src/org/jetbrains/java/decompiler/main/extern/ClassFormatException.java
index c2a7e7e01b4e05089ebabded926a4d3fc0fa1cd4..f72f714fd39c771602c8acea68cf88f6ddfae720 100644
--- a/src/org/jetbrains/java/decompiler/main/extern/ClassFormatException.java
+++ b/src/org/jetbrains/java/decompiler/main/extern/ClassFormatException.java
@@ -2,6 +2,8 @@
 package org.jetbrains.java.decompiler.main.extern;
 
 public class ClassFormatException extends RuntimeException {
+  private static final long serialVersionUID = -3504050107699778122L;
+
   public ClassFormatException(String message) {
     super(message);
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ClasspathHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ClasspathHelper.java
index be3d5ef53bd5e94511732e64ed30f54d03bdb469..cbfbe89e158c837ddc300af378ef1b3f03dba73a 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ClasspathHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ClasspathHelper.java
@@ -32,7 +32,7 @@ public final class ClasspathHelper {
   private static Method findMethodOnClasspath(String targetClass, String methodSignature) {
     try {
       // use bootstrap classloader to only provide access to JRE classes
-      Class cls = new ClassLoader(null) {}.loadClass(targetClass);
+      Class<?> cls = new ClassLoader(null) {}.loadClass(targetClass);
       for (Method mtd : cls.getMethods()) {
         // use contains() to ignore access modifiers and thrown exceptions
         if (mtd.toString().contains(methodSignature)) {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ExpressionStack.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ExpressionStack.java
index ad979285982779c7e14fe2a0d965ff615c60a08c..a70bfa659b9f879d08066ad0bbe757ba158817ca 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ExpressionStack.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ExpressionStack.java
@@ -5,6 +5,8 @@ import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
 import org.jetbrains.java.decompiler.util.ListStack;
 
 public class ExpressionStack extends ListStack<Exprent> {
+  private static final long serialVersionUID = 6319656655369063081L;
+
   public ExpressionStack() { }
 
   private ExpressionStack(int initialCapacity) {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
index c870c683cad7935d7aba141c0310ec0f0a2fdeda..245e6685f03711a50a5a81626aa865012db1b210 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
@@ -788,6 +788,7 @@ public abstract class Statement implements IMatchable {
   }
 
   // helper methods
+  @Override
   public String toString() {
     return Integer.toString(id);
   }
diff --git a/src/org/jetbrains/java/decompiler/struct/match/MatchNode.java b/src/org/jetbrains/java/decompiler/struct/match/MatchNode.java
index ff33e75e4ab923c944ccc82189973283628b264b..53e43a4af02e41efe5a68720a7bc36560df337be 100644
--- a/src/org/jetbrains/java/decompiler/struct/match/MatchNode.java
+++ b/src/org/jetbrains/java/decompiler/struct/match/MatchNode.java
@@ -23,6 +23,7 @@ public class MatchNode {
       return (strValue.charAt(0) == '$' && strValue.charAt(strValue.length() - 1) == '$');
     }
 
+    @Override
     public String toString() {
       return value.toString();
     }
diff --git a/src/org/jetbrains/java/decompiler/util/FastFixedSetFactory.java b/src/org/jetbrains/java/decompiler/util/FastFixedSetFactory.java
index bb3d73d551e5211e0674a1082135638737b99a74..e6e1bf1181f300e72aae83663b96babade56123c 100644
--- a/src/org/jetbrains/java/decompiler/util/FastFixedSetFactory.java
+++ b/src/org/jetbrains/java/decompiler/util/FastFixedSetFactory.java
@@ -141,7 +141,7 @@ public class FastFixedSetFactory<E> {
       }
     }
 
-
+    @Override
     public boolean equals(Object o) {
       if (o == this) return true;
       if (!(o instanceof FastFixedSet)) return false;
@@ -199,6 +199,7 @@ public class FastFixedSetFactory<E> {
       return cl;
     }
 
+    @Override
     public String toString() {
 
       StringBuilder buffer = new StringBuilder("{");
diff --git a/src/org/jetbrains/java/decompiler/util/FastSparseSetFactory.java b/src/org/jetbrains/java/decompiler/util/FastSparseSetFactory.java
index 18c4efa9357802202a893dd2ea158855c2af8b95..cdab38f537fe679c652b6f92031f8ecc93d482a0 100644
--- a/src/org/jetbrains/java/decompiler/util/FastSparseSetFactory.java
+++ b/src/org/jetbrains/java/decompiler/util/FastSparseSetFactory.java
@@ -67,6 +67,7 @@ public class FastSparseSetFactory<E> {
 
 
   public static final class FastSparseSet<E> implements Iterable<E> {
+    @SuppressWarnings("rawtypes")
     public static final FastSparseSet[] EMPTY_ARRAY = new FastSparseSet[0];
 
     private final FastSparseSetFactory<E> factory;
@@ -244,7 +245,7 @@ public class FastSparseSetFactory<E> {
       while (pointer != 0);
     }
 
-
+    @Override
     public boolean equals(Object o) {
       if (o == this) return true;
       if (!(o instanceof FastSparseSet)) return false;
@@ -327,6 +328,7 @@ public class FastSparseSetFactory<E> {
       return set;
     }
 
+    @Override
     public String toString() {
       return toPlainSet().toString();
     }
diff --git a/src/org/jetbrains/java/decompiler/util/ListStack.java b/src/org/jetbrains/java/decompiler/util/ListStack.java
index ebd50ce0f4c5681140309a58d3be0b5979efb33c..6a13eb3aa5530a23ad0dfc1091b6706996c07fac 100644
--- a/src/org/jetbrains/java/decompiler/util/ListStack.java
+++ b/src/org/jetbrains/java/decompiler/util/ListStack.java
@@ -4,6 +4,8 @@ package org.jetbrains.java.decompiler.util;
 import java.util.ArrayList;
 
 public class ListStack<T> extends ArrayList<T> {
+  private static final long serialVersionUID = 4874630267758255754L;
+
   private int pointer = 0;
 
   public ListStack() {
diff --git a/src/org/jetbrains/java/decompiler/util/SFormsFastMapDirect.java b/src/org/jetbrains/java/decompiler/util/SFormsFastMapDirect.java
index bb8b4dd9b866ec54491da50310b09b6fcb0bdf3f..f218e82caff716a20362aaec0e0bacb23698740c 100644
--- a/src/org/jetbrains/java/decompiler/util/SFormsFastMapDirect.java
+++ b/src/org/jetbrains/java/decompiler/util/SFormsFastMapDirect.java
@@ -56,7 +56,7 @@ public class SFormsFastMapDirect {
     SFormsFastMapDirect map = new SFormsFastMapDirect(false);
     map.size = size;
 
-    FastSparseSet[][] mapelements = map.elements;
+    FastSparseSet<?>[][] mapelements = map.elements;
     int[][] mapnext = map.next;
 
     for (int i = 2; i >= 0; i--) {
@@ -309,6 +309,7 @@ public class SFormsFastMapDirect {
     }
   }
 
+  @Override
   public String toString() {
 
     StringBuilder buffer = new StringBuilder("{");
diff --git a/src/org/jetbrains/java/decompiler/util/VBStyleCollection.java b/src/org/jetbrains/java/decompiler/util/VBStyleCollection.java
index 4454337b3405997eebd895538e8e66789531e6e4..962422dc5aa591e1c49bf1097025070237c9e2f5 100644
--- a/src/org/jetbrains/java/decompiler/util/VBStyleCollection.java
+++ b/src/org/jetbrains/java/decompiler/util/VBStyleCollection.java
@@ -6,6 +6,7 @@ import java.util.Collection;
 import java.util.HashMap;
 
 public class VBStyleCollection<E, K> extends ArrayList<E> {
+  private static final long serialVersionUID = -7446846573826962329L;
 
   private HashMap<K, Integer> map = new HashMap<>();
 
