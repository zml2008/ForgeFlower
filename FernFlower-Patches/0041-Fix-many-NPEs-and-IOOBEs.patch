From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Geolykt <admin@geolykt.de>
Date: Sat, 20 Feb 2021 23:20:16 +0100
Subject: [PATCH] Fix many NPEs and IOOBEs

It's staggering how many exceptions there were, but in the end my
application that I used to test this against was decompiled without
any significant errors (there's still the issue of <unknown> being used
in enchanted for-loops) and correct logic (compared to the output of
Krakatau). Of course I'd now need to figure out how to decompile enums.

diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/IfHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/IfHelper.java
index 89bfae3f4e04424e44bb9e2779bd4f1e2dcd3f8b..dfae2337159f9b532bc5fc5225f39eecdc7e2e9e 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/IfHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/IfHelper.java
@@ -109,7 +109,7 @@ public class IfHelper {
   private static boolean collapseIfIf(IfNode rtnode) {
     if (rtnode.edgetypes.get(0) == 0) {
       IfNode ifbranch = rtnode.succs.get(0);
-      if (ifbranch.succs.size() == 2) {
+      if (ifbranch.succs.size() == 2 && rtnode.succs.size() >= 2) {
 
         // if-if branch
         if (ifbranch.succs.get(1).value == rtnode.succs.get(1).value) {
@@ -181,7 +181,7 @@ public class IfHelper {
   private static boolean collapseIfElse(IfNode rtnode) {
     if (rtnode.edgetypes.get(0) == 0) {
       IfNode ifbranch = rtnode.succs.get(0);
-      if (ifbranch.succs.size() == 2) {
+      if (ifbranch.succs.size() == 2 && rtnode.succs.size() >= 2) {
         // if-else branch
         if (ifbranch.succs.get(0).value == rtnode.succs.get(1).value) {
 
@@ -230,7 +230,7 @@ public class IfHelper {
   }
 
   private static boolean collapseElse(IfNode rtnode) {
-    if (rtnode.edgetypes.get(1) == 0) {
+    if (rtnode.edgetypes.size() >= 2 && rtnode.edgetypes.get(1) == 0) {
       IfNode elsebranch = rtnode.succs.get(1);
       if (elsebranch.succs.size() == 2) {
 
@@ -363,6 +363,9 @@ public class IfHelper {
     }
 
     // else branch
+    if (stat.getAllSuccessorEdges().size() == 0) {
+      return res;
+    }
     StatEdge edge = stat.getAllSuccessorEdges().get(0);
     Statement elsechild = edge.getDestination();
     IfNode elsenode = new IfNode(elsechild);
@@ -494,7 +497,7 @@ public class IfHelper {
 
       ifstat.iftype = IfStatement.IFTYPE_IFELSE;
     }
-    else if (ifdirect && (!elsedirect || (noifstat && !noelsestat))) {  // if - then
+    else if (ifdirect && (!elsedirect || (noifstat && !noelsestat)) && !ifstat.getAllSuccessorEdges().isEmpty()) {  // if - then
 
       // negate the if condition
       IfExprent statexpr = ifstat.getHeadexprent();
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/LabelHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/LabelHelper.java
index 017218b7bee3fbf993b890b4e007f65c0a84f177..397bb9a7031f31ebeab4128ac33e4744ac04289c 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/LabelHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/LabelHelper.java
@@ -254,7 +254,7 @@ public class LabelHelper {
           Statement stt = swst.getCaseStatements().get(i);
           Statement stnext = swst.getCaseStatements().get(i + 1);
 
-          if (stnext.getExprents() != null && stnext.getExprents().isEmpty()) {
+          if (stnext.getExprents() != null && stnext.getExprents().isEmpty() && !stnext.getAllSuccessorEdges().isEmpty()) {
             stnext = stnext.getAllSuccessorEdges().get(0).getDestination();
           }
           processEdgesWithNext(stt, setExplicitEdges(stt), stnext);
@@ -263,7 +263,7 @@ public class LabelHelper {
         int last = swst.getCaseStatements().size() - 1;
         if (last >= 0) { // empty switch possible
           Statement stlast = swst.getCaseStatements().get(last);
-          if (stlast.getExprents() != null && stlast.getExprents().isEmpty()) {
+          if (stlast.getExprents() != null && stlast.getExprents().isEmpty() && !stlast.getAllSuccessorEdges().isEmpty()) {
             StatEdge edge = stlast.getAllSuccessorEdges().get(0);
             mapEdges.put(edge.getDestination(), new ArrayList<>(Collections.singletonList(edge)));
           }
@@ -387,7 +387,7 @@ public class LabelHelper {
       if (last >= 0) { // empty switch possible
         Statement stlast = swst.getCaseStatements().get(last);
 
-        if (stlast.getExprents() != null && stlast.getExprents().isEmpty()) {
+        if (stlast.getExprents() != null && stlast.getExprents().isEmpty() && !stlast.getAllSuccessorEdges().isEmpty()) {
           if (!stlast.getAllSuccessorEdges().get(0).explicit) {
             List<StatEdge> lstEdges = swst.getCaseEdges().get(last);
             lstEdges.remove(swst.getDefault_edge());
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/LoopExtractHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/LoopExtractHelper.java
index 52796181c35878da2c5053c88432ce8367a2f3c7..8d3dc65ccb67b1da34e4e2d3f95ea1c5a1af2d2f 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/LoopExtractHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/LoopExtractHelper.java
@@ -102,6 +102,9 @@ public class LoopExtractHelper {
       IfStatement lastif = (IfStatement)last;
       if (lastif.iftype == IfStatement.IFTYPE_IF && lastif.getIfstat() != null) {
         Statement ifstat = lastif.getIfstat();
+        if (lastif.getAllSuccessorEdges().isEmpty()) {
+            return false;
+        }
         StatEdge elseedge = lastif.getAllSuccessorEdges().get(0);
 
         if (elseedge.getType() == StatEdge.TYPE_CONTINUE && elseedge.closure == stat) {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/SwitchHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/SwitchHelper.java
index fe77dd7ea6ac6c877230b0c8d4b138a5e49d60dc..5beebb2996e804ea1385841e7cd02ec5567a4603 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/SwitchHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/SwitchHelper.java
@@ -47,7 +47,7 @@ public class SwitchHelper {
       FieldExprent arrayField = (FieldExprent)array.getArray();
       ClassesProcessor.ClassNode classNode =
         DecompilerContext.getClassProcessor().getMapRootClasses().get(arrayField.getClassname());
-      if (classNode != null) {
+      if (classNode != null && classNode.getWrapper() != null) {
         MethodWrapper wrapper = classNode.getWrapper().getMethodWrapper(CodeConstants.CLINIT_NAME, "()V");
         if (wrapper != null && wrapper.root != null) {
           wrapper.getOrBuildGraph().iterateExprents(exprent -> {
@@ -137,6 +137,7 @@ public class SwitchHelper {
   }
 
   public static final int STATIC_FINAL_SYNTHETIC = CodeConstants.ACC_STATIC | CodeConstants.ACC_FINAL | CodeConstants.ACC_SYNTHETIC;
+
   /**
    * When Java introduced Enums they added the ability to use them in Switch statements.
    * This was done in a purely syntax sugar way using the old switch on int methods.
@@ -166,13 +167,22 @@ public class SwitchHelper {
           return field.getName().startsWith("$SwitchMap") || //This is non-standard but we don't have any more information so..
             (index instanceof InvocationExprent && ((InvocationExprent) index).getName().equals("ordinal"));
         }
-        
-        StructField stField = classNode.getWrapper().getClassStruct().getField(field.getName(), field.getDescriptor().descriptorString);
+        StructField stField;
+        if (classNode.getWrapper() == null) { // I have no idea why this happens, according to debug tests it doesn't even return null
+          stField = classNode.classStruct.getField(field.getName(), field.getDescriptor().descriptorString);
+        } else {
+          stField = classNode.getWrapper().getClassStruct().getField(field.getName(), field.getDescriptor().descriptorString);
+        }
         if ((stField.getAccessFlags() & STATIC_FINAL_SYNTHETIC) != STATIC_FINAL_SYNTHETIC) {
           return false;
         }
-        
-        if ((classNode.getWrapper().getClassStruct().getAccessFlags() & CodeConstants.ACC_SYNTHETIC) == CodeConstants.ACC_SYNTHETIC) {
+        boolean isSyncheticClass = false;
+        if (classNode.getWrapper() == null) {
+          isSyncheticClass = (classNode.classStruct.getAccessFlags() & CodeConstants.ACC_SYNTHETIC) == CodeConstants.ACC_SYNTHETIC;
+        } else {
+          isSyncheticClass = (classNode.getWrapper().getClassStruct().getAccessFlags() & CodeConstants.ACC_SYNTHETIC) == CodeConstants.ACC_SYNTHETIC;
+        }
+        if (isSyncheticClass) {
           return true; //TODO: Find a way to check the structure of the initalizer?
           //Exprent init = classNode.getWrapper().getStaticFieldInitializers().getWithKey(InterpreterUtil.makeUniqueKey(field.getName(), field.getDescriptor().descriptorString));
           //Above is null because we haven't preocess the class yet?
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
index 7a3790fb7b4e33ca86ecf5e90f9eb4a8e30145db..6e8baa9cd037f309e0188e63feb512c87fd2db85 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
@@ -742,14 +742,16 @@ public class InvocationExprent extends Exprent {
         // types, and check unboxing as needed. Currently it causes some false forces
         else if (inv.isUnboxingCall() && !inv.shouldForceUnboxing()) {
           StructClass stClass = DecompilerContext.getStructContext().getClass(classname);
-          for (StructMethod mt : stClass.getMethods()) {
-            if (name.equals(mt.getName()) && (currCls == null || canAccess(currCls.classStruct, mt)) && !stringDescriptor.equals(mt.getDescriptor())) {
-              MethodDescriptor md = MethodDescriptor.parseDescriptor(mt.getDescriptor());
-              if (md.params.length == descriptor.params.length) {
-                if (md.params[i].type == CodeConstants.TYPE_OBJECT) {
-                  if (DecompilerContext.getStructContext().instanceOf(inv.getInstance().getExprType().value, md.params[i].value)) {
-                    inv.forceUnboxing(true);
-                    break;
+          if (stClass != null) { // This is rare, but can happen, especially if only a single class is decoded
+            for (StructMethod mt : stClass.getMethods()) {
+              if (name.equals(mt.getName()) && (currCls == null || canAccess(currCls.classStruct, mt)) && !stringDescriptor.equals(mt.getDescriptor())) {
+                MethodDescriptor md = MethodDescriptor.parseDescriptor(mt.getDescriptor());
+                if (md.params.length == descriptor.params.length) {
+                  if (md.params[i].type == CodeConstants.TYPE_OBJECT) {
+                    if (DecompilerContext.getStructContext().instanceOf(inv.getInstance().getExprType().value, md.params[i].value)) {
+                      inv.forceUnboxing(true);
+                      break;
+                    }
                   }
                 }
               }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/FlattenStatementsHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/FlattenStatementsHelper.java
index bdafd77466aacfeb3499eff76052054b4856df31..858cb2d13952b90f9bcaff521b0909782c3db551 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/FlattenStatementsHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/FlattenStatementsHelper.java
@@ -283,7 +283,7 @@ public class FlattenStatementsHelper {
               node = graph.nodes.getWithKey(mapDestinationNodes.get(stat.getFirst().id)[0]);
               mapDestinationNodes.put(stat.id, new String[]{node.id, null});
 
-              if (stat.type == Statement.TYPE_IF && ((IfStatement)stat).iftype == IfStatement.IFTYPE_IF) {
+              if (stat.type == Statement.TYPE_IF && ((IfStatement)stat).iftype == IfStatement.IFTYPE_IF && !stat.getAllSuccessorEdges().isEmpty()) {
                 lstSuccEdges.add(stat.getSuccessorEdges(Statement.STATEDGE_DIRECT_ALL).get(0));  // exactly one edge
                 sourcenode = tailexprlst.get(0) == null ? node : graph.nodes.getWithKey(node.id + "_tail");
               }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
index 1b1d911df7b6767a56f543980b3adbb05f7cdb5d..0879c8c28b1661f256ca64f54807183f540b1268 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
@@ -657,7 +657,7 @@ public class VarDefinitionHelper {
       return null;
     }
 
-    int index = varproc.getVarOriginalIndex(var.getIndex());
+    Integer index = varproc.getVarOriginalIndex(var.getIndex());
     VarVersionPair new_ = this_vars.get(index);
     if (new_ != null) {
       VarVersionPair old = new VarVersionPair(var);
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
index ec60c001a0c56aadf71b7badf0284ed656121153..633af67a2bfd241186f2fd6db8c7e4e9bf5f1094 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
@@ -82,8 +82,12 @@ public class VarProcessor {
     if (varVersions == null) {
       return null;
     }
-
-    return varVersions.getMapOriginalVarIndices().get(index).var;
+    VarVersionPair pair = varVersions.getMapOriginalVarIndices().get(index);
+    if (pair == null) {
+      return null;
+    } else {
+      return pair.var;
+    }
   }
 
   public void refreshVarNames(VarNamesCollector vc) {
